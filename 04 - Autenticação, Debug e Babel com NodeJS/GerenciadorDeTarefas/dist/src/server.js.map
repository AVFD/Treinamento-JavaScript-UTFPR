{"version":3,"sources":["../../src/server.js"],"names":["app","require","debug","http","port","normalizePort","process","env","PORT","set","server","createServer","sync","force","then","listen","on","onError","onListening","catch","console","error","ex","val","parseInt","isNaN","syscall","bind","code","exit","addr","address"],"mappings":";;AAQA;;AARA;;;;AAIA,IAAIA,MAAMC,QAAQ,OAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,aAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAIA;;;;AAIA,IAAIG,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;;AAEA;;;;AAIA,IAAIM,SAASP,KAAKQ,YAAL,CAAkBX,GAAlB,CAAb;;AAEA;;;AAGA,kBAAUY,IAAV,CAAe,EAAEC,OAAO,IAAT,EAAf,EACGC,IADH,CACQ,YAAM;AACVJ,SAAOK,MAAP,CAAcX,IAAd;AACAM,SAAOM,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAP,SAAOM,EAAP,CAAU,WAAV,EAAuBE,WAAvB;AACD,CALH,EAKKC,KALL,CAKW,cAAM;AACbC,UAAQC,KAAR,CAAcC,EAAd;AACD,CAPH;;AAUA;;;;AAIA,SAASjB,aAAT,CAAuBkB,GAAvB,EAA4B;AAC1B,MAAInB,OAAOoB,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMrB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOmB,GAAP;AACD;;AAED,MAAInB,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASa,OAAT,CAAiBI,KAAjB,EAAwB;AACtB,MAAIA,MAAMK,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAML,KAAN;AACD;;AAED,MAAIM,OAAO,OAAOvB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQiB,MAAMO,IAAd;AACE,SAAK,QAAL;AACER,cAAQC,KAAR,CAAcM,OAAO,+BAArB;AACArB,cAAQuB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACET,cAAQC,KAAR,CAAcM,OAAO,oBAArB;AACArB,cAAQuB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMR,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASH,WAAT,GAAuB;AACrB,MAAIY,OAAOpB,OAAOqB,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAK1B,IAFnB;AAGAF,QAAM,kBAAkByB,IAAxB;AACD","file":"server.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar app = require('./app');\nvar debug = require('debug')('http:server');\nvar http = require('http');\n\nimport { sequelize } from './models';\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\nsequelize.sync({ force: true })\n  .then(() => {\n    server.listen(port);\n    server.on('error', onError);\n    server.on('listening', onListening);\n  }).catch(ex => {\n    console.error(ex);\n  })\n\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}